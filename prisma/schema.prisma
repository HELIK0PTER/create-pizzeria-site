generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Settings {
  id                       String   @id @default(cuid()) @map("id")
  name                     String   @default("Bella Pizza")
  slogan                   String?  @default("Les meilleures pizzas de la ville")
  logo                     String?
  phone                    String   @default("01 23 45 67 89")
  email                    String   @default("contact@bellapizza.fr")
  address                  String   @default("123 Rue de la Pizza, 75001 Paris")
  openingHours             Json?
  isOpen                   Boolean  @default(true)
  closedMessage            String?  @default("Nous sommes actuellement fermés")
  clickAndCollectEnabled   Boolean  @default(true)
  deliveryEnabled          Boolean  @default(true)
  deliveryZone             Json?
  deliveryFee              Float    @default(3.50)
  freeDeliveryThreshold    Float?   @default(25.00)
  minOrderAmount           Float    @default(15.00)
  deliveryTime             String   @default("30-45 min")
  preparationTime          String   @default("15-20 min")
  pickupInstructions       String?  @default("Présentez-vous à l'accueil avec votre numéro de commande")
  cashEnabled              Boolean  @default(true)
  cardEnabled              Boolean  @default(true)
  onlinePaymentEnabled     Boolean  @default(true)
  cashMaxAmount            Float?   @default(50.00)
  ticketsRestaurantEnabled Boolean  @default(true)
  checkEnabled             Boolean  @default(false)
  facebookUrl              String?
  instagramUrl             String?
  websiteUrl               String?
  welcomeMessage           String?  @default("Bienvenue chez Bella Pizza !")
  specialAnnouncement      String?
  primaryColor             String   @default("#EA580C")
  secondaryColor           String   @default("#FED7AA")
  backgroundColor          String   @default("#FFFFFF")
  headerImage              String?
  adminEmail               String   @default("admin@bellapizza.fr")
  orderNotificationEmail   Boolean  @default(true)
  
  // Champs de promotion pour les pizzas
  promotionsEnabled        Boolean  @default(false)
  deliveryPromotionEnabled Boolean  @default(false)
  deliveryPromotionBuy     Int      @default(2)
  deliveryPromotionGet     Int      @default(1)
  pickupPromotionEnabled   Boolean  @default(false)
  pickupPromotionBuy       Int      @default(1)
  pickupPromotionGet       Int      @default(1)
  promotionDescription     String?  @default("Promotions sur les pizzas !")
  
  // Champs de temps d'attente pour les messages personnalisés
  deliveryWaitTimeMin      Int      @default(30)
  deliveryWaitTimeMax      Int      @default(45)
  pickupWaitTimeMin        Int      @default(15)
  pickupWaitTimeMax        Int      @default(25)
  orderSuccessMessage      String?  @default("Merci pour votre commande !")
  
  // =================== CONFIGURATION DES NOTIFICATIONS ===================
  
  // Notifications générales
  notificationsEnabled     Boolean  @default(true)
  
  // Configuration Email (Nodemailer)
  emailNotificationsEnabled Boolean @default(false)
  smtpHost                 String?  @default("smtp.gmail.com")
  smtpPort                 Int      @default(587)
  smtpSecure               Boolean  @default(false) // true pour 465, false pour autres ports
  smtpUser                 String?  // Email d'envoi
  smtpPassword             String?  // Mot de passe ou app password
  emailFromName            String?  @default("Bella Pizza")
  emailFromAddress         String?  // Email expéditeur (doit correspondre au smtpUser)
  
  // Configuration SMS (Twilio)
  smsNotificationsEnabled  Boolean  @default(false)
  twilioAccountSid         String?  // Account SID Twilio
  twilioAuthToken          String?  // Auth Token Twilio  
  twilioPhoneNumber        String?  // Numéro Twilio d'envoi (format: +33123456789)
  
  // Paramètres avancés notifications
  notifyOnConfirmed        Boolean  @default(true)
  notifyOnPreparing        Boolean  @default(true)
  notifyOnReady            Boolean  @default(true)
  notifyOnDelivering       Boolean  @default(true)
  notifyOnCompleted        Boolean  @default(true)
  notifyOnCancelled        Boolean  @default(true)
  notifyOnPaymentFailed    Boolean  @default(true)
  
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  @@map("settings")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified Boolean   @default(false)
  image         String?
  phone         String?
  role          String    @default("customer") // "customer", "delivery", "admin"
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  banned        Boolean?
  banReason     String?
  banExpires    DateTime?
  favouriteAddressId String?
  addresses     Address[] @relation("UserAddresses")
  favouriteAddress Address? @relation("UserFavouriteAddress", fields: [favouriteAddressId], references: [id])
  orders        Order[]
  deliveries    Order[]   @relation("OrderDeliverer")
  accounts      Account[]
  sessions      Session[]
  favorites     Favorite[]

  @@map("user")
}

model Session {
  id             String   @id @default(cuid())
  expiresAt      DateTime
  token          String   @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  ipAddress      String?
  userAgent      String?
  userId         String
  impersonatedBy String?
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("verification")
}

model Address {
  id         String   @id @default(cuid())
  userId     String
  name       String
  street     String
  city       String
  postalCode String
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation("UserAddresses", fields: [userId], references: [id], onDelete: Cascade)
  userFavourite User[] @relation("UserFavouriteAddress")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  slug        String    @unique
  description String?
  image       String?
  order       Int       @default(0)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Product {
  id          String         @id @default(cuid())
  name        String
  slug        String         @unique
  description String?
  image       String?
  categoryId  Int
  price       Float
  isAvailable Boolean        @default(true)
  ingredients String?
  allergens   String?
  baseType    PizzaBaseType?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  orderItems  OrderItem[]
  category    Category       @relation(fields: [categoryId], references: [id])
  variants    Variant[]
  favorites   Favorite[]
  menuProducts MenuProduct[]
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model Variant {
  id         String      @id @default(cuid())
  productId  String
  name       String
  price      Float
  isDefault  Boolean     @default(false)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  orderItems OrderItem[]
  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  userId          String?
  delivererId     String?
  customerName    String
  customerEmail   String?
  customerPhone   String
  deliveryAddress String?
  deliveryMethod  String
  status          String
  paymentMethod   String?
  paymentStatus   String?
  subTotal        Float
  deliveryFee     Float
  total           Float
  notes           String?
  pickupTime      DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  orderItems      OrderItem[]
  user            User?       @relation(fields: [userId], references: [id])
  deliverer       User?       @relation("OrderDeliverer", fields: [delivererId], references: [id])

  @@map("order")
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  variantId String?
  quantity  Int
  unitPrice Float
  totalPrice Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant   Variant? @relation(fields: [variantId], references: [id])

  @@map("order_item")
}

model DailyStats {
  id          String   @id @default(cuid())
  date        DateTime @unique @db.Date
  ordersCount Int
  revenue     Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("daily_stats")
}

enum PizzaBaseType {
  Tomate
  Crème
  Barbecue
}

model Menu {
  id          String    @id @default(cuid())
  name        String
  image       String?
  price       Float
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  menuProducts MenuProduct[]
}

model MenuProduct {
  id        String    @id @default(cuid())
  menuId    String
  productId String
  type      String // "pizza", "drink", "dessert"
  allowChoice Boolean @default(false) // Si l'utilisateur peut choisir
  minQuantity Int     @default(1)     // Quantité minimale à choisir
  maxQuantity Int     @default(1)     // Quantité maximale à choisir

  menu      Menu      @relation(fields: [menuId], references: [id])
  product   Product   @relation(fields: [productId], references: [id])

  @@unique([menuId, productId, type])
}
