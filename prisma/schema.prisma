generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Settings {
  id                       String   @id @default(cuid()) @map("id")
  name                     String   @default("Bella Pizza")
  slogan                   String?  @default("Les meilleures pizzas de la ville")
  logo                     String?
  phone                    String   @default("01 23 45 67 89")
  email                    String   @default("contact@bellapizza.fr")
  address                  String   @default("123 Rue de la Pizza, 75001 Paris")
  openingHours             Json?
  isOpen                   Boolean  @default(true)
  closedMessage            String?  @default("Nous sommes actuellement fermés")
  clickAndCollectEnabled   Boolean  @default(true)
  deliveryEnabled          Boolean  @default(true)
  deliveryZone             Json?
  deliveryFee              Float    @default(3.50)
  freeDeliveryThreshold    Float?   @default(25.00)
  minOrderAmount           Float    @default(15.00)
  deliveryTime             String   @default("30-45 min")
  preparationTime          String   @default("15-20 min")
  pickupInstructions       String?  @default("Présentez-vous à l'accueil avec votre numéro de commande")
  cashEnabled              Boolean  @default(true)
  cardEnabled              Boolean  @default(true)
  onlinePaymentEnabled     Boolean  @default(true)
  cashMaxAmount            Float?   @default(50.00)
  ticketsRestaurantEnabled Boolean  @default(true)
  checkEnabled             Boolean  @default(false)
  facebookUrl              String?
  instagramUrl             String?
  websiteUrl               String?
  welcomeMessage           String?  @default("Bienvenue chez Bella Pizza !")
  specialAnnouncement      String?
  primaryColor             String   @default("#EA580C")
  secondaryColor           String   @default("#FED7AA")
  backgroundColor          String   @default("#FFFFFF")
  headerImage              String?
  adminEmail               String   @default("admin@bellapizza.fr")
  orderNotificationEmail   Boolean  @default(true)
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  @@map("settings")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified Boolean   @default(false)
  image         String?
  phone         String?
  role          String    @default("customer")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  banned        Boolean?
  banReason     String?
  banExpires    DateTime?
  addresses     Address[]
  orders        Order[]
  accounts      Account[]
  sessions      Session[]

  @@map("user")
}

model Session {
  id             String   @id @default(cuid())
  expiresAt      DateTime
  token          String   @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  ipAddress      String?
  userAgent      String?
  userId         String
  impersonatedBy String?
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("verification")
}

model Address {
  id         String   @id @default(cuid())
  userId     String
  name       String
  street     String
  city       String
  postalCode String
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  slug        String    @unique
  description String?
  image       String?
  order       Int       @default(0)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Product {
  id          String         @id @default(cuid())
  name        String
  slug        String         @unique
  description String?
  image       String?
  categoryId  Int
  price       Float
  isAvailable Boolean        @default(true)
  ingredients String?
  allergens   String?
  baseType    PizzaBaseType?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  orderItems  OrderItem[]
  category    Category       @relation(fields: [categoryId], references: [id])
  variants    Variant[]
}

model Variant {
  id         String      @id @default(cuid())
  productId  String
  name       String
  price      Float
  isDefault  Boolean     @default(false)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  orderItems OrderItem[]
  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  userId          String?
  customerName    String
  customerEmail   String
  customerPhone   String
  deliveryAddress String?
  deliveryMethod  String
  pickupTime      DateTime?
  status          String      @default("pending")
  paymentMethod   String
  paymentStatus   String      @default("pending")
  stripePaymentId String?
  stripeSessionId String?     @unique
  subTotal        Float
  deliveryFee     Float       @default(0)
  total           Float
  notes           String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  user            User?       @relation(fields: [userId], references: [id])
  items           OrderItem[]
}

model OrderItem {
  id         String   @id @default(cuid())
  orderId    String
  productId  String
  variantId  String?
  quantity   Int
  unitPrice  Float
  totalPrice Float
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id])
  variant    Variant? @relation(fields: [variantId], references: [id])
}

model DailyStats {
  id          String   @id @default(cuid())
  date        DateTime @unique
  ordersCount Int      @default(0)
  revenue     Float    @default(0)
  createdAt   DateTime @default(now())
}

enum PizzaBaseType {
  Tomate
  Crème
  Barbecue
}
